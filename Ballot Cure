import ftplib
import os
import yaml
import re
import pandas as pd
from datetime import datetime
import zipfile

# Load FTP credentials from YAML file
def load_credentials(yaml_file):
    with open(yaml_file, 'r') as file:
        return yaml.safe_load(file)

# Path to the YAML file
yaml_file = 'C:\\Users\\camer\\Downloads\\credentials.yml'
try:
    creds = load_credentials(yaml_file)
    print("Loaded credentials:", creds)
except yaml.YAMLError as e:
    print(f"Error loading YAML file: {e}")
    raise

# FTP server details
FTP_SERVER = creds['ftp']['server']
FTP_USER = creds['ftp']['user']
FTP_PASS = creds['ftp']['pass']
FTP_DIR = creds['ftp']['dir']

# Directory and file pattern to download
DIRECTORY_TO_DOWNLOAD = '/CE-077_Rejected_Cure'
FILE_PATTERN_ZIP = r'^CE-077_Rejected_Cure.*\.zip$'
LOCAL_DIR = os.path.join(os.path.expanduser("~"), "Downloads")

def download_matching_files(directory, pattern):
    try:
        ftp = ftplib.FTP_TLS(FTP_SERVER)
        ftp.set_debuglevel(2)
        ftp.auth()
        ftp.prot_p()
        ftp.login(FTP_USER, FTP_PASS)
        ftp.cwd(FTP_DIR)

        try:
            ftp.cwd(directory)
        except ftplib.error_perm as e:
            if '550' in str(e):
                print(f"Directory {directory} not found. Listing directories:")
                ftp.retrlines('LIST')
                return
            else:
                raise

        files = ftp.nlst()
        print(f"Files in directory {directory}: {files}")

        for file_name in files:
            if re.match(pattern, file_name):
                local_filepath = os.path.join(LOCAL_DIR, file_name)
                with open(local_filepath, 'wb') as local_file:
                    ftp.retrbinary(f'RETR {file_name}', local_file.write)
                print(f"Downloaded {file_name} to {local_filepath}")

                unzip_zip_file(local_filepath)
            else:
                print(f"File {file_name} does not match the pattern.")

        ftp.quit()

    except ftplib.all_errors as e:
        print(f"FTP error: {e}")

def unzip_zip_file(zip_file_path):
    try:
        with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
            zip_ref.extractall(LOCAL_DIR)
        print(f"Extracted {zip_file_path}")
    except Exception as e:
        print(f"Error extracting zip file: {e}")

def process_voter_details_files():
    all_voter_data = pd.DataFrame()

    output_file_base_name = "CE_077_Rejected_Cure"
    
    for file_name in os.listdir(LOCAL_DIR):
        if file_name.endswith('.txt'):
            txt_file_path = os.path.join(LOCAL_DIR, file_name)
            print(f"Processing file: {file_name}")
            try:
                df = pd.read_csv(txt_file_path, delimiter='|', header=0, encoding='utf-8', 
                                 usecols=['VOTER_ID', 'STATUS', 'STATUS_REASON'])
                # Filter for rows where STATUS is "rejected"
                df_rejected = df[df['STATUS'].str.lower() == 'rejected']
                all_voter_data = pd.concat([all_voter_data, df_rejected], ignore_index=True)
                print(f"Processed {len(df_rejected)} rejected records from {file_name}")
            except Exception as e:
                print(f"Failed to read {file_name}: {e}")

    all_voter_data = all_voter_data.drop_duplicates(subset='VOTER_ID').reset_index(drop=True)
    print(f"Total distinct rejected records: {len(all_voter_data)}")

    # Get unique STATUS_REASON values
    unique_status_reasons = all_voter_data['STATUS_REASON'].unique()

    # Save each unique STATUS_REASON to a separate file
    today = datetime.today().strftime('%Y-%m-%d')
    for reason in unique_status_reasons:
        reason_data = all_voter_data[all_voter_data['STATUS_REASON'] == reason]
        if not reason_data.empty:
            csv_file_path = os.path.join(LOCAL_DIR, f"{output_file_base_name}_Rejected_Voter_IDs_{reason}_{today}.csv")
            reason_data.to_csv(csv_file_path, index=False)
            print(f"Saved to {csv_file_path}")
        else:
            print(f"No rejected records found for STATUS_REASON: {reason}")

if __name__ == "__main__":
    download_matching_files(DIRECTORY_TO_DOWNLOAD, FILE_PATTERN_ZIP)
    process_voter_details_files()
