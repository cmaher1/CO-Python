from google.oauth2 import service_account
from googleapiclient.discovery import build
from datetime import datetime, timedelta
import calendar
import pytz

# Path to your service account JSON file
SERVICE_ACCOUNT_FILE = 'C:\\Users\\camer\\Downloads\\credentials.json'  # Update with your actual path
SCOPES = ['https://www.googleapis.com/auth/calendar']

# Authenticate and build the service
credentials = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES)

service = build('calendar', 'v3', credentials=credentials)

# Your Calendar ID
calendar_id = 'cameronmaher53@gmail.com'  # Replace with your actual calendar ID

# Function to create an event, considering events only up to the end of 2024
def create_event(service, calendar_id, start_time, end_time, summary, recurrence=None):
    end_of_2024 = datetime(2024, 12, 31, 23, 59, 59, tzinfo=pytz.UTC)  # Making end_of_2024 timezone-aware
    event_start = datetime.fromisoformat(start_time)
    
    # Ensure event_start is timezone-aware
    if event_start.tzinfo is None:
        event_start = pytz.timezone('America/Denver').localize(event_start)

    # Check if event start date is beyond end of 2024
    if event_start > end_of_2024:
        print(f"Event creation skipped for {summary} as it starts after 2024.")
        return None
    
    event = {
        'summary': summary,
        'start': {
            'dateTime': start_time,
            'timeZone': 'America/Denver',  # Adjust time zone as needed
        },
        'end': {
            'dateTime': end_time,
            'timeZone': 'America/Denver',  # Adjust time zone as needed
        }
    }
    
    if recurrence:
        event['recurrence'] = recurrence

    try:
        event = service.events().insert(calendarId=calendar_id, body=event).execute()
        print(f"Event created: {event.get('htmlLink')}")
        return event['id']
    except Exception as e:
        print(f"Error creating event: {e}")
        return None

# Function to delete an event
def delete_event(service, calendar_id, event_id):
    try:
        service.events().delete(calendarId=calendar_id, eventId=event_id).execute()
        print(f"Event deleted: {event_id}")
    except Exception as e:
        print(f"Error deleting event: {e}")

# Set the start date for event creation
start_date = datetime(2024, 6, 14, 10, 30)

# Recurrence rule for every Friday at 10:30 AM
recurrence_rule = ['RRULE:FREQ=WEEKLY;BYDAY=FR']

# Create the main recurring event for every Friday at 10:30 AM
main_event_id = create_event(service, calendar_id, start_date.isoformat(), (start_date + timedelta(hours=1)).isoformat(), 'Doctor Appointment', recurrence=recurrence_rule)

# Handle the third Friday exception for each month
time_zone = pytz.timezone('America/Denver')

for month in range(1, 13):  # January to December
    # Find the third Friday of the month
    year = start_date.year
    try:
        third_friday_day = [day for day in range(15, 22) if calendar.weekday(year, month, day) == calendar.FRIDAY][0]
        third_friday_date = datetime(year, month, third_friday_day, 10, 0)
        
        # Create the start and end times for the event to be deleted
        event_start_time = time_zone.localize(third_friday_date).isoformat()
        event_end_time = (time_zone.localize(third_friday_date) + timedelta(hours=1)).isoformat()

        # Search for and delete the main recurring event for the third Friday
        try:
            events = service.events().list(calendarId=calendar_id, timeMin=event_start_time, timeMax=event_end_time, singleEvents=True).execute()
            for event in events['items']:
                if event['summary'] == 'Doctor Appointment' and 'recurringEventId' in event:
                    delete_event(service, calendar_id, event['id'])
        except Exception as e:
            print(f"Error finding event to delete: {e}")

        # Create an exception event for the third Friday at 10:00 AM
        create_event(service, calendar_id, event_start_time, event_end_time, 'Doctor Appointment')
    except IndexError:
        print(f"Could not find the third Friday in year {year}, month {month}")

print("Event creation process completed.")
